{"version":3,"sources":["components/navBar.js","services.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","className","API_ROOT","locations","averages","cities","getCities","a","axios","get","headers","getLocations","id","getAverages","parameter","selectedDate","selectedLocation","App","useState","graphData","setGraphData","setCities","selectedCity","setSelectedCity","setLocations","loader","setLoader","setSelectedLocation","setSelectedDate","errorflag","setErrorflag","useEffect","getCitiesData","Services","citiesData","data","results","console","log","cityDataHandle","event","target","value","locationData","sortedLocations","sort","b","name","fetchData","pollutantData","pollutantDataNO2","pollutantDataPM10","receivedDataPM","status","forEach","result","push","x","Date","hour","getHours","y","average","receivedDataNo2","no2","receivedDataPM10","PM10","datasets","label","backgroundColor","borderWidth","placeholder","onChange","length","map","city","index","location","type","onClick","options","scales","xAxes","scaleLabel","display","labelString","ticks","min","max","yAxes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.749dd9cd.chunk.js","sourcesContent":["import React from 'react';\r\nconst NavBar = () => {\r\n    return(\r\n  <div className=\"navBar\">\r\n      <h1>Openaq</h1>\r\n  </div>\r\n    )\r\n}\r\nexport default NavBar;","import axios from 'axios'\r\nconst API_ROOT = 'https://u50g7n0cbj.execute-api.us-east-1.amazonaws.com/v2/'\r\nexport const locations = `${API_ROOT}locations`;\r\nexport const averages = `${API_ROOT}averages`;\r\nexport const cities  = `${API_ROOT}cities`;\r\nexport async function getCities() {\r\n    return await axios.get(cities+'?limit=100&page=1&offset=0&sort=asc&order_by=city&country=IN', {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n  }\r\n  export async function getLocations(id) {\r\n    return await axios.get(locations+'?limit=100&page=1&offset=0&sort=desc&radius=1000&order_by=lastUpdated&dumpRaw=false&city='+id, {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n  }  \r\n  export async function getAverages(parameter,selectedDate,selectedLocation) {\r\n    return await axios.get(averages+'?parameter='+parameter+'&temporal=hour&limit=10000&date_from='+selectedDate+'T00%3A00%3A00.000Z&date_to='+selectedDate+'T23%3A59%3A59.999Z&location='+selectedLocation+'&spatial=location&sort=asc&order_by=hour', {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n  }","import React,{useState,useEffect} from 'react'\nimport './App.css';\nimport {Scatter} from 'react-chartjs-2'\nimport NavBar from './components/navBar'\nimport * as Services from './services'\n\nfunction App() {\nconst [graphData,setGraphData] = useState('');\nconst [cities,setCities] = useState('');\nconst [selectedCity,setSelectedCity] = useState('');\nconst [locations,setLocations] = useState('');\nconst [loader,setLoader] = useState(false)\nconst [selectedLocation,setSelectedLocation] = useState('');\nconst [selectedDate,setSelectedDate] = useState('');\nconst [errorflag,setErrorflag] = useState(false)\nuseEffect(()=>{\ngetCitiesData()\n},[])\nconst getCitiesData = async() => {\ntry{\nconst citiesData = await Services.getCities()\nsetCities(citiesData.data.results)\n}\ncatch(err){\nconsole.log(err)\n}\n}\nconst cityDataHandle = async(event) => {\n    setErrorflag(false)\n    setSelectedDate('')\n    setSelectedCity(event.target.value)\n    setGraphData('')\n    const locationData = await Services.getLocations(event.target.value)\n    const sortedLocations = locationData.data.results.sort((a,b) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0))\n    setLocations(sortedLocations)\n\n}\nconst changeLocationHandle = (event) => {\n  setErrorflag(false)\n  setSelectedDate('')\n  setSelectedLocation(event.target.value)\n  setGraphData('')\n\n} \nconst fetchData = async() => {\nif(selectedLocation ==='' || selectedDate === '' || selectedCity === ''){\n  setErrorflag(true)\n}\nelse{\n  setLoader(true)\n  let pollutantData = [];\n  let pollutantDataNO2 = [];\n  let pollutantDataPM10 = [];\n  try{\n    const receivedDataPM = await Services.getAverages('pm25',selectedDate,selectedLocation)\n  if(receivedDataPM.status===200){\n  receivedDataPM?.data.results.forEach((result)=>{\n    \n  pollutantData.push({x : (new Date(result.hour).getHours()),y : result.average})\n  })\n}\n}\n  catch(err){\n    console.log(err)\n    setLoader(false)\n  }\n\n  try{\n  const receivedDataNo2 = await Services.getAverages('no2',selectedDate,selectedLocation)\n  if(receivedDataNo2.status===200){\n\n  receivedDataNo2?.data.results.forEach(no2=>{\n   pollutantDataNO2.push({x :new Date(no2.hour).getHours(),y: no2.average})\n  })\n}\n}\ncatch(error){\n  setLoader(false)\n  console.log(error)\n}\ntry{\n  const receivedDataPM10 = await Services.getAverages('pm10',selectedDate,selectedLocation)\n  if(receivedDataPM10.status===200){\n  receivedDataPM10?.data.results.forEach(PM10=>{\n    pollutantDataPM10.push({x :new Date(PM10.hour).getHours(),y: PM10.average})\n   })\n\n  }\n  }\n  catch(err){\n    console.log(err)\n    setLoader(false)\n  }\n  setGraphData({\n  datasets:[{\n  label:'Pollution Data(PM2.5)',\n  data:pollutantData,\n  backgroundColor: 'rgba(255, 99, 132, 1)',\n  borderWidth:4,\n  },\n  {\n    label:'Pollution Data(NO2)',\n    data:pollutantDataNO2,\n    backgroundColor: '#61dafb',\n    borderWidth:4,\n    },\n    {\n      label:'Pollution Data(PM10)',\n      data:pollutantDataPM10,\n      backgroundColor: 'aquablue',\n      borderWidth:4,\n      }\n  ]\n  \n  })\nsetLoader(false)\n}\n}\nconst options= {\n  scales: {\n    xAxes: [{\n      scaleLabel: {\n        display: true,\n        labelString: 'Hours'\n      },\n      ticks: {\n        min:0,\n        max: 24\n    }\n    }],\n    yAxes: [{\n      scaleLabel: {\n        display: true,\n        labelString: 'Pollutant'\n      },\n      ticks: {\n        min:0,\n    }\n      \n    }]\n  }     \n}\nreturn (\n<div className=\"App\">\n  <NavBar />\n<div>\n  <div className=\"search\">\n<select value={selectedCity} className=\"inputFields\" placeholder=\"select city\" onChange={cityDataHandle}>\n  <option value=\"\">Select city</option>\n  {cities.length>0 &&\n  cities.map((city,index)=>{\n    return <option key={index} value={city.city}>{city.city}</option>\n  })\n}\n</select>\n<select value={selectedLocation} className=\"inputFields\" placeholder=\"select Location\" onChange={changeLocationHandle}>\n  <option value=\"\">Select Location</option>\n  {locations.length>0 &&\n  locations.map((location,index)=>{\n    return <option key={location.id} value={location.id}>{location.name}</option>\n  })\n}\n</select>\n<input type=\"date\" value={selectedDate} className=\"inputFields\" \nonChange={(event)=>{\n  setGraphData('')\n  setSelectedDate(event.target.value)\n  setErrorflag(false)\n}}\n/>\n<button className=\"btn\" onClick={fetchData}>proceed</button>\n</div>\n</div>\n<div className=\"error_division\">\n  {errorflag&&<p>Select relevant fields!</p>}\n</div>\n<div className=\"graph\">\n{graphData&&\n<div className=\"content\">\n<Scatter data={graphData} options={options} />\n</div>\n}\n</div>\n{loader?<div className=\"lds-dual-ring\"></div>:null}\n</div>\n);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}